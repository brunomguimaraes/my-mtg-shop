type AddToUserCreditCardInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  creditCardInfoPaymentInfo: PaymentInfo
  userUserEdge: UserEdge
  creditCardInfoPaymentInfoEdge: PaymentInfoEdge
}

input AddToUserCreditCardInfoUserInput {
  creditCardInfoPaymentInfoId: ID!
  userUserId: ID!
  clientMutationId: String!
}

enum Colors {
  Blue
  Black
  Colorless
  White
  Green
  Red
  Gold
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreatePaymentInfo {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
  userId: ID
  user: PaymentInfouserUser
}

input CreatePaymentInfoInput {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
  userId: ID
  user: PaymentInfouserUser
  clientMutationId: String!
}

type CreatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input CreateProduct {
  cardColor: Colors
  imgUrl: String
  name: String!
  price: Float
  quantity: Int
}

input CreateProductInput {
  cardColor: Colors
  imgUrl: String
  name: String!
  price: Float
  quantity: Int
  clientMutationId: String!
}

type CreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

input CreateUser {
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
}

"""
If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
"""
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeletePaymentInfoInput {
  id: ID!
  clientMutationId: String!
}

type DeletePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
  deletedId: ID
}

input DeleteProductInput {
  id: ID!
  clientMutationId: String!
}

type DeleteProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

input FileFilter {
  """Logical AND on all given filters."""
  AND: [FileFilter!]

  """Logical OR on all given filters."""
  OR: [FileFilter!]
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

input InvokeFunctionInput {
  name: String!
  input: String!
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String!
  clientMutationId: String
}

type Mutation {
  createFile(input: CreateFileInput!): CreateFilePayload
  createPaymentInfo(input: CreatePaymentInfoInput!): CreatePaymentInfoPayload
  createProduct(input: CreateProductInput!): CreateProductPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updatePaymentInfo(input: UpdatePaymentInfoInput!): UpdatePaymentInfoPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreatePaymentInfo(input: UpdateOrCreatePaymentInfoInput!): UpdateOrCreatePaymentInfoPayload
  updateOrCreateProduct(input: UpdateOrCreateProductInput!): UpdateOrCreateProductPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deletePaymentInfo(input: DeletePaymentInfoInput!): DeletePaymentInfoPayload
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToUserCreditCardInfo(input: AddToUserCreditCardInfoUserInput!): AddToUserCreditCardInfoPayload
  removeFromUserCreditCardInfo(input: RemoveFromUserCreditCardInfoUserInput!): RemoveFromUserCreditCardInfoPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
  invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentInfo implements Node {
  cardNumber: Int!
  cvv: Int!
  id: ID!
  isValid: Boolean!
  user(filter: UserFilter): User
}

"""A connection to a list of items."""
type PaymentInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentInfoEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type PaymentInfoEdge {
  """The item at the end of the edge."""
  node: PaymentInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

input PaymentInfoFilter {
  """Logical AND on all given filters."""
  AND: [PaymentInfoFilter!]

  """Logical OR on all given filters."""
  OR: [PaymentInfoFilter!]
  cardNumber: Int

  """All values that are not equal to given value."""
  cardNumber_not: Int

  """All values that are contained in given list."""
  cardNumber_in: [Int!]

  """All values that are not contained in given list."""
  cardNumber_not_in: [Int!]

  """All values less than the given value."""
  cardNumber_lt: Int

  """All values less than or equal the given value."""
  cardNumber_lte: Int

  """All values greater than the given value."""
  cardNumber_gt: Int

  """All values greater than or equal the given value."""
  cardNumber_gte: Int
  cvv: Int

  """All values that are not equal to given value."""
  cvv_not: Int

  """All values that are contained in given list."""
  cvv_in: [Int!]

  """All values that are not contained in given list."""
  cvv_not_in: [Int!]

  """All values less than the given value."""
  cvv_lt: Int

  """All values less than or equal the given value."""
  cvv_lte: Int

  """All values greater than the given value."""
  cvv_gt: Int

  """All values greater than or equal the given value."""
  cvv_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isValid: Boolean

  """All values that are not equal to given value."""
  isValid_not: Boolean
  user: UserFilter
}

enum PaymentInfoOrderBy {
  cardNumber_ASC
  cardNumber_DESC
  cvv_ASC
  cvv_DESC
  id_ASC
  id_DESC
  isValid_ASC
  isValid_DESC
}

input PaymentInfouserUser {
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
}

type Product implements Node {
  cardColor: Colors
  id: ID!
  imgUrl: String
  name: String!
  price: Float
  quantity: Int
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

input ProductFilter {
  """Logical AND on all given filters."""
  AND: [ProductFilter!]

  """Logical OR on all given filters."""
  OR: [ProductFilter!]
  cardColor: Colors

  """All values that are not equal to given value."""
  cardColor_not: Colors

  """All values that are contained in given list."""
  cardColor_in: [Colors!]

  """All values that are not contained in given list."""
  cardColor_not_in: [Colors!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  imgUrl: String

  """All values that are not equal to given value."""
  imgUrl_not: String

  """All values that are contained in given list."""
  imgUrl_in: [String!]

  """All values that are not contained in given list."""
  imgUrl_not_in: [String!]

  """All values less than the given value."""
  imgUrl_lt: String

  """All values less than or equal the given value."""
  imgUrl_lte: String

  """All values greater than the given value."""
  imgUrl_gt: String

  """All values greater than or equal the given value."""
  imgUrl_gte: String

  """All values containing the given string."""
  imgUrl_contains: String

  """All values not containing the given string."""
  imgUrl_not_contains: String

  """All values starting with the given string."""
  imgUrl_starts_with: String

  """All values not starting with the given string."""
  imgUrl_not_starts_with: String

  """All values ending with the given string."""
  imgUrl_ends_with: String

  """All values not ending with the given string."""
  imgUrl_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
}

enum ProductOrderBy {
  cardColor_ASC
  cardColor_DESC
  id_ASC
  id_DESC
  imgUrl_ASC
  imgUrl_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
}

type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RemoveFromUserCreditCardInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  creditCardInfoPaymentInfo: PaymentInfo
  userUserEdge: UserEdge
  creditCardInfoPaymentInfoEdge: PaymentInfoEdge
}

input RemoveFromUserCreditCardInfoUserInput {
  creditCardInfoPaymentInfoId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input SignupUserInput {
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  clientMutationId: String!
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreatePaymentInfoInput {
  update: UpdatePaymentInfo!
  create: CreatePaymentInfo!
  clientMutationId: String!
}

type UpdateOrCreatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input UpdateOrCreateProductInput {
  update: UpdateProduct!
  create: CreateProduct!
  clientMutationId: String!
}

type UpdateOrCreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdatePaymentInfo {
  cardNumber: Int
  cvv: Int
  id: ID!
  isValid: Boolean
  userId: ID
  user: PaymentInfouserUser
}

input UpdatePaymentInfoInput {
  cardNumber: Int
  cvv: Int
  id: ID!
  isValid: Boolean
  userId: ID
  user: PaymentInfouserUser
  clientMutationId: String!
}

type UpdatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input UpdateProduct {
  cardColor: Colors
  id: ID!
  imgUrl: String
  name: String
  price: Float
  quantity: Int
}

input UpdateProductInput {
  cardColor: Colors
  id: ID!
  imgUrl: String
  name: String
  price: Float
  quantity: Int
  clientMutationId: String!
}

type UpdateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

input UpdateUser {
  id: ID!
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
}

input UpdateUserInput {
  id: ID!
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  creditCardInfo(filter: PaymentInfoFilter, orderBy: PaymentInfoOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentInfoConnection
  id: ID!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

input UsercreditCardInfoPaymentInfo {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserFilter {
  """Logical AND on all given filters."""
  AND: [UserFilter!]

  """Logical OR on all given filters."""
  OR: [UserFilter!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  creditCardInfo_every: PaymentInfoFilter
  creditCardInfo_some: PaymentInfoFilter
  creditCardInfo_none: PaymentInfoFilter
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""This is the famous Relay viewer object"""
type Viewer {
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allPaymentInfoes(filter: PaymentInfoFilter, orderBy: PaymentInfoOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentInfoConnection!
  allProducts(filter: ProductFilter, orderBy: ProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  File(id: ID, secret: String, url: String): File
  PaymentInfo(id: ID): PaymentInfo
  Product(id: ID): Product
  User(id: ID): User
  id: ID!
}

