type Query {
  _: Boolean
  users: [User!]
  user(id: ID!): User
  me: User
  shoppingCarts: [ShoppingCart!]!
  shoppingCart(id: ID!): ShoppingCart!
  creditCardInfos: [PaymentInfo!]!
  creditCardInfo(id: ID!): PaymentInfo!
  products: [Product!]!
  product(id: ID!): Product!
  cartProducts: [CartProduct!]!
  cartProduct(id: ID!): CartProduct!
}

type User {
  creditCardInfo: [PaymentInfo!]!
  id: ID!
  name: String!
  shoppingCart: ShoppingCart
}

type ShoppingCart {
  id: ID!
  user: User
  cartProducts: [CartProduct]
}

type PaymentInfo {
  id: ID!
  user: User!
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
}

type CartProduct {
  id: ID!
  product: Product
  shoppingCart: ShoppingCart
  quantityOnCart: Int
}

type ShoppingCartInput {
  userId: ID
}

type Mutation {
  _: Boolean
  createShoppingCart(userId: ID): ShoppingCartInput
  deleteShoppingCart(id: ID!): Boolean!
  createCreditCard(cardNumber: Int!, cvv: Int!, isValid: Boolean!): PaymentInfo!
  deleteCreditCard(id: ID!): Boolean!
  createProduct(
    imgUrl: String
    name: String!
    price: Float
    quantityInStock: Int
    cardType: String
    description: String
    cardColor: Colors
  ): Product!
  updateProduct(input: UpdateProductInput): Product
  deleteProduct(id: ID!): Boolean!
  createCartProduct(input: CreateCartProductInput): CartProductResponse
  updateCartProduct(input: UpdateCartProductInput): CartProductResponse
  deleteCartProduct(id: ID!): Boolean!
}

type Product {
  id: ID!
  imgUrl: String
  name: String
  price: Float
  quantityInStock: Int
  cardType: String
  description: String
  cardColor: Colors
}

type CartProductResponse {
  id: ID!
  product: Product
  shoppingCart: ShoppingCart
  quantityOnCart: Int
}

input CreateCartProductInput {
  productId: ID
  quantityOnCart: Int
  shoppingCartId: ID
}
input UpdateCartProductInput {
  id: ID!
  quantityOnCart: Int
}

input UpdateProductInput {
  id: ID!
  quantityInStock: Int
}

enum Colors {
  Blue
  Black
  Colorless
  White
  Green
  Red
  Gold
}
