input AddToCartProductOnProductCartProductInput {
  productProductId: ID!
  cartProductCartProductId: ID!
  clientMutationId: String!
}

input AddToOrderOnShoppingCartOrderInput {
  shoppingCartShoppingCartId: ID!
  orderOrderId: ID!
  clientMutationId: String!
}

type AddToShoppingCartOnCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCartShoppingCart: ShoppingCart
  cartProductsCartProduct: CartProduct
  shoppingCartShoppingCartEdge: ShoppingCartEdge
  cartProductsCartProductEdge: CartProductEdge
}

input AddToShoppingCartOnCartProductShoppingCartInput {
  cartProductsCartProductId: ID!
  shoppingCartShoppingCartId: ID!
  clientMutationId: String!
}

type AddToUserCreditCardInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  creditCardInfoPaymentInfo: PaymentInfo
  userUserEdge: UserEdge
  creditCardInfoPaymentInfoEdge: PaymentInfoEdge
}

input AddToUserCreditCardInfoUserInput {
  creditCardInfoPaymentInfoId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserOnOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  ordersOrder: Order
  userUserEdge: UserEdge
  ordersOrderEdge: OrderEdge
}

input AddToUserOnOrderUserInput {
  ordersOrderId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input AddToUserOnShoppingCartUserInput {
  shoppingCartShoppingCartId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type CartProduct implements Node {
  id: ID!
  product(filter: ProductFilter): Product
  quantityOnCart: Int!
  shoppingCart(filter: ShoppingCartFilter): ShoppingCart
}

"""A connection to a list of items."""
type CartProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartProductEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type CartProductEdge {
  """The item at the end of the edge."""
  node: CartProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

input CartProductFilter {
  """Logical AND on all given filters."""
  AND: [CartProductFilter!]

  """Logical OR on all given filters."""
  OR: [CartProductFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantityOnCart: Int

  """All values that are not equal to given value."""
  quantityOnCart_not: Int

  """All values that are contained in given list."""
  quantityOnCart_in: [Int!]

  """All values that are not contained in given list."""
  quantityOnCart_not_in: [Int!]

  """All values less than the given value."""
  quantityOnCart_lt: Int

  """All values less than or equal the given value."""
  quantityOnCart_lte: Int

  """All values greater than the given value."""
  quantityOnCart_gt: Int

  """All values greater than or equal the given value."""
  quantityOnCart_gte: Int
  product: ProductFilter
  shoppingCart: ShoppingCartFilter
}

enum CartProductOrderBy {
  id_ASC
  id_DESC
  quantityOnCart_ASC
  quantityOnCart_DESC
}

input CartProductproductProduct {
  cardColor: Colors
  imgUrl: String
  name: String!
  price: Float
  quantityInStock: Int
}

input CartProductshoppingCartShoppingCart {
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
}

enum Colors {
  Blue
  Black
  Colorless
  White
  Green
  Red
  Gold
}

input CreateCartProduct {
  quantityOnCart: Int
  productId: ID
  product: CartProductproductProduct
  shoppingCartId: ID
  shoppingCart: CartProductshoppingCartShoppingCart
}

input CreateCartProductInput {
  quantityOnCart: Int
  productId: ID
  product: CartProductproductProduct
  shoppingCartId: ID
  shoppingCart: CartProductshoppingCartShoppingCart
  clientMutationId: String!
}

type CreateCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProduct: CartProduct
  edge: CartProductEdge
  product: Product
  shoppingCart: ShoppingCart
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateOrder {
  isPaid: Boolean
  orderNumber: Int!
  shoppingCartId: ID
  shoppingCart: OrdershoppingCartShoppingCart
  userId: ID
  user: OrderuserUser
}

input CreateOrderInput {
  isPaid: Boolean
  orderNumber: Int!
  shoppingCartId: ID
  shoppingCart: OrdershoppingCartShoppingCart
  userId: ID
  user: OrderuserUser
  clientMutationId: String!
}

type CreateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  shoppingCart: ShoppingCart
  user: User
}

input CreatePaymentInfo {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
  userId: ID
  user: PaymentInfouserUser
}

input CreatePaymentInfoInput {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
  userId: ID
  user: PaymentInfouserUser
  clientMutationId: String!
}

type CreatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input CreateProduct {
  cardColor: Colors
  imgUrl: String
  name: String!
  price: Float
  quantityInStock: Int
  cartProductId: ID
  cartProduct: ProductcartProductCartProduct
}

input CreateProductInput {
  cardColor: Colors
  imgUrl: String
  name: String!
  price: Float
  quantityInStock: Int
  cartProductId: ID
  cartProduct: ProductcartProductCartProduct
  clientMutationId: String!
}

type CreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  cartProduct: CartProduct
}

input CreateShoppingCart {
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
}

input CreateShoppingCartInput {
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
  clientMutationId: String!
}

type CreateShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCart: ShoppingCart
  edge: ShoppingCartEdge
  order: Order
  user: User
}

input CreateUser {
  name: String!
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
}

"""
If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
"""
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteCartProductInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProduct: CartProduct
  edge: CartProductEdge
  product: Product
  shoppingCart: ShoppingCart
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteOrderInput {
  id: ID!
  clientMutationId: String!
}

type DeleteOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  shoppingCart: ShoppingCart
  user: User
  deletedId: ID
}

input DeletePaymentInfoInput {
  id: ID!
  clientMutationId: String!
}

type DeletePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
  deletedId: ID
}

input DeleteProductInput {
  id: ID!
  clientMutationId: String!
}

type DeleteProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  cartProduct: CartProduct
  deletedId: ID
}

input DeleteShoppingCartInput {
  id: ID!
  clientMutationId: String!
}

type DeleteShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCart: ShoppingCart
  edge: ShoppingCartEdge
  order: Order
  user: User
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  shoppingCart: ShoppingCart
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

input FileFilter {
  """Logical AND on all given filters."""
  AND: [FileFilter!]

  """Logical OR on all given filters."""
  OR: [FileFilter!]
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

input InvokeFunctionInput {
  name: String!
  input: String!
  clientMutationId: String
}

type InvokeFunctionPayload {
  result: String!
  clientMutationId: String
}

type Mutation {
  createCartProduct(input: CreateCartProductInput!): CreateCartProductPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  createPaymentInfo(input: CreatePaymentInfoInput!): CreatePaymentInfoPayload
  createProduct(input: CreateProductInput!): CreateProductPayload
  createShoppingCart(input: CreateShoppingCartInput!): CreateShoppingCartPayload
  updateCartProduct(input: UpdateCartProductInput!): UpdateCartProductPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  updatePaymentInfo(input: UpdatePaymentInfoInput!): UpdatePaymentInfoPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  updateShoppingCart(input: UpdateShoppingCartInput!): UpdateShoppingCartPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateCartProduct(input: UpdateOrCreateCartProductInput!): UpdateOrCreateCartProductPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateOrder(input: UpdateOrCreateOrderInput!): UpdateOrCreateOrderPayload
  updateOrCreatePaymentInfo(input: UpdateOrCreatePaymentInfoInput!): UpdateOrCreatePaymentInfoPayload
  updateOrCreateProduct(input: UpdateOrCreateProductInput!): UpdateOrCreateProductPayload
  updateOrCreateShoppingCart(input: UpdateOrCreateShoppingCartInput!): UpdateOrCreateShoppingCartPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteCartProduct(input: DeleteCartProductInput!): DeleteCartProductPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteOrder(input: DeleteOrderInput!): DeleteOrderPayload
  deletePaymentInfo(input: DeletePaymentInfoInput!): DeletePaymentInfoPayload
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload
  deleteShoppingCart(input: DeleteShoppingCartInput!): DeleteShoppingCartPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  setCartProductOnProduct(input: AddToCartProductOnProductCartProductInput!): SetCartProductOnProductPayload
  setOrderOnShoppingCart(input: AddToOrderOnShoppingCartOrderInput!): SetOrderOnShoppingCartPayload
  setUserOnShoppingCart(input: AddToUserOnShoppingCartUserInput!): SetUserOnShoppingCartPayload
  unsetCartProductOnProduct(input: UnsetCartProductOnProductCartProductInput!): UnsetCartProductOnProductPayload
  unsetOrderOnShoppingCart(input: UnsetOrderOnShoppingCartOrderInput!): UnsetOrderOnShoppingCartPayload
  unsetUserOnShoppingCart(input: UnsetUserOnShoppingCartUserInput!): UnsetUserOnShoppingCartPayload
  addToShoppingCartOnCartProduct(input: AddToShoppingCartOnCartProductShoppingCartInput!): AddToShoppingCartOnCartProductPayload
  addToUserCreditCardInfo(input: AddToUserCreditCardInfoUserInput!): AddToUserCreditCardInfoPayload
  addToUserOnOrder(input: AddToUserOnOrderUserInput!): AddToUserOnOrderPayload
  removeFromShoppingCartOnCartProduct(input: RemoveFromShoppingCartOnCartProductShoppingCartInput!): RemoveFromShoppingCartOnCartProductPayload
  removeFromUserCreditCardInfo(input: RemoveFromUserCreditCardInfoUserInput!): RemoveFromUserCreditCardInfoPayload
  removeFromUserOnOrder(input: RemoveFromUserOnOrderUserInput!): RemoveFromUserOnOrderPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
  invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  isPaid: Boolean!
  orderNumber: Int!
  shoppingCart(filter: ShoppingCartFilter): ShoppingCart
  user(filter: UserFilter): User
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

input OrderFilter {
  """Logical AND on all given filters."""
  AND: [OrderFilter!]

  """Logical OR on all given filters."""
  OR: [OrderFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isPaid: Boolean

  """All values that are not equal to given value."""
  isPaid_not: Boolean
  orderNumber: Int

  """All values that are not equal to given value."""
  orderNumber_not: Int

  """All values that are contained in given list."""
  orderNumber_in: [Int!]

  """All values that are not contained in given list."""
  orderNumber_not_in: [Int!]

  """All values less than the given value."""
  orderNumber_lt: Int

  """All values less than or equal the given value."""
  orderNumber_lte: Int

  """All values greater than the given value."""
  orderNumber_gt: Int

  """All values greater than or equal the given value."""
  orderNumber_gte: Int
  shoppingCart: ShoppingCartFilter
  user: UserFilter
}

enum OrderOrderBy {
  id_ASC
  id_DESC
  isPaid_ASC
  isPaid_DESC
  orderNumber_ASC
  orderNumber_DESC
}

input OrdershoppingCartShoppingCart {
  totalCartPrice: Float
  totalQuantityInCart: Int
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
}

input OrderuserUser {
  name: String!
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentInfo implements Node {
  cardNumber: Int!
  cvv: Int!
  id: ID!
  isValid: Boolean!
  user(filter: UserFilter): User
}

"""A connection to a list of items."""
type PaymentInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentInfoEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type PaymentInfoEdge {
  """The item at the end of the edge."""
  node: PaymentInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

input PaymentInfoFilter {
  """Logical AND on all given filters."""
  AND: [PaymentInfoFilter!]

  """Logical OR on all given filters."""
  OR: [PaymentInfoFilter!]
  cardNumber: Int

  """All values that are not equal to given value."""
  cardNumber_not: Int

  """All values that are contained in given list."""
  cardNumber_in: [Int!]

  """All values that are not contained in given list."""
  cardNumber_not_in: [Int!]

  """All values less than the given value."""
  cardNumber_lt: Int

  """All values less than or equal the given value."""
  cardNumber_lte: Int

  """All values greater than the given value."""
  cardNumber_gt: Int

  """All values greater than or equal the given value."""
  cardNumber_gte: Int
  cvv: Int

  """All values that are not equal to given value."""
  cvv_not: Int

  """All values that are contained in given list."""
  cvv_in: [Int!]

  """All values that are not contained in given list."""
  cvv_not_in: [Int!]

  """All values less than the given value."""
  cvv_lt: Int

  """All values less than or equal the given value."""
  cvv_lte: Int

  """All values greater than the given value."""
  cvv_gt: Int

  """All values greater than or equal the given value."""
  cvv_gte: Int
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isValid: Boolean

  """All values that are not equal to given value."""
  isValid_not: Boolean
  user: UserFilter
}

enum PaymentInfoOrderBy {
  cardNumber_ASC
  cardNumber_DESC
  cvv_ASC
  cvv_DESC
  id_ASC
  id_DESC
  isValid_ASC
  isValid_DESC
}

input PaymentInfouserUser {
  name: String!
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
}

"""Product on Shelf"""
type Product implements Node {
  cardColor: Colors
  cartProduct(filter: CartProductFilter): CartProduct
  id: ID!
  imgUrl: String
  name: String!
  price: Float
  quantityInStock: Int
}

input ProductcartProductCartProduct {
  quantityOnCart: Int
  shoppingCartId: ID
  shoppingCart: CartProductshoppingCartShoppingCart
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

input ProductFilter {
  """Logical AND on all given filters."""
  AND: [ProductFilter!]

  """Logical OR on all given filters."""
  OR: [ProductFilter!]
  cardColor: Colors

  """All values that are not equal to given value."""
  cardColor_not: Colors

  """All values that are contained in given list."""
  cardColor_in: [Colors!]

  """All values that are not contained in given list."""
  cardColor_not_in: [Colors!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  imgUrl: String

  """All values that are not equal to given value."""
  imgUrl_not: String

  """All values that are contained in given list."""
  imgUrl_in: [String!]

  """All values that are not contained in given list."""
  imgUrl_not_in: [String!]

  """All values less than the given value."""
  imgUrl_lt: String

  """All values less than or equal the given value."""
  imgUrl_lte: String

  """All values greater than the given value."""
  imgUrl_gt: String

  """All values greater than or equal the given value."""
  imgUrl_gte: String

  """All values containing the given string."""
  imgUrl_contains: String

  """All values not containing the given string."""
  imgUrl_not_contains: String

  """All values starting with the given string."""
  imgUrl_starts_with: String

  """All values not starting with the given string."""
  imgUrl_not_starts_with: String

  """All values ending with the given string."""
  imgUrl_ends_with: String

  """All values not ending with the given string."""
  imgUrl_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantityInStock: Int

  """All values that are not equal to given value."""
  quantityInStock_not: Int

  """All values that are contained in given list."""
  quantityInStock_in: [Int!]

  """All values that are not contained in given list."""
  quantityInStock_not_in: [Int!]

  """All values less than the given value."""
  quantityInStock_lt: Int

  """All values less than or equal the given value."""
  quantityInStock_lte: Int

  """All values greater than the given value."""
  quantityInStock_gt: Int

  """All values greater than or equal the given value."""
  quantityInStock_gte: Int
  cartProduct: CartProductFilter
}

enum ProductOrderBy {
  cardColor_ASC
  cardColor_DESC
  id_ASC
  id_DESC
  imgUrl_ASC
  imgUrl_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  quantityInStock_ASC
  quantityInStock_DESC
}

type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RemoveFromShoppingCartOnCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCartShoppingCart: ShoppingCart
  cartProductsCartProduct: CartProduct
  shoppingCartShoppingCartEdge: ShoppingCartEdge
  cartProductsCartProductEdge: CartProductEdge
}

input RemoveFromShoppingCartOnCartProductShoppingCartInput {
  cartProductsCartProductId: ID!
  shoppingCartShoppingCartId: ID!
  clientMutationId: String!
}

type RemoveFromUserCreditCardInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  creditCardInfoPaymentInfo: PaymentInfo
  userUserEdge: UserEdge
  creditCardInfoPaymentInfoEdge: PaymentInfoEdge
}

input RemoveFromUserCreditCardInfoUserInput {
  creditCardInfoPaymentInfoId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserOnOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  ordersOrder: Order
  userUserEdge: UserEdge
  ordersOrderEdge: OrderEdge
}

input RemoveFromUserOnOrderUserInput {
  ordersOrderId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type SetCartProductOnProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProductCartProduct: CartProduct
  productProduct: Product
  cartProductCartProductEdge: CartProductEdge
  productProductEdge: ProductEdge
}

type SetOrderOnShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  orderOrder: Order
  shoppingCartShoppingCart: ShoppingCart
  orderOrderEdge: OrderEdge
  shoppingCartShoppingCartEdge: ShoppingCartEdge
}

type SetUserOnShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  shoppingCartShoppingCart: ShoppingCart
  userUserEdge: UserEdge
  shoppingCartShoppingCartEdge: ShoppingCartEdge
}

type ShoppingCart implements Node {
  cartProducts(filter: CartProductFilter, orderBy: CartProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CartProductConnection
  id: ID!
  order(filter: OrderFilter): Order
  totalCartPrice: Float!
  totalQuantityInCart: Int!
  user(filter: UserFilter): User
}

input ShoppingCartcartProductsCartProduct {
  quantityOnCart: Int
  productId: ID
  product: CartProductproductProduct
}

"""A connection to a list of items."""
type ShoppingCartConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShoppingCartEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type ShoppingCartEdge {
  """The item at the end of the edge."""
  node: ShoppingCart!

  """A cursor for use in pagination."""
  cursor: String!
}

input ShoppingCartFilter {
  """Logical AND on all given filters."""
  AND: [ShoppingCartFilter!]

  """Logical OR on all given filters."""
  OR: [ShoppingCartFilter!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  totalCartPrice: Float

  """All values that are not equal to given value."""
  totalCartPrice_not: Float

  """All values that are contained in given list."""
  totalCartPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalCartPrice_not_in: [Float!]

  """All values less than the given value."""
  totalCartPrice_lt: Float

  """All values less than or equal the given value."""
  totalCartPrice_lte: Float

  """All values greater than the given value."""
  totalCartPrice_gt: Float

  """All values greater than or equal the given value."""
  totalCartPrice_gte: Float
  totalQuantityInCart: Int

  """All values that are not equal to given value."""
  totalQuantityInCart_not: Int

  """All values that are contained in given list."""
  totalQuantityInCart_in: [Int!]

  """All values that are not contained in given list."""
  totalQuantityInCart_not_in: [Int!]

  """All values less than the given value."""
  totalQuantityInCart_lt: Int

  """All values less than or equal the given value."""
  totalQuantityInCart_lte: Int

  """All values greater than the given value."""
  totalQuantityInCart_gt: Int

  """All values greater than or equal the given value."""
  totalQuantityInCart_gte: Int
  cartProducts_every: CartProductFilter
  cartProducts_some: CartProductFilter
  cartProducts_none: CartProductFilter
  order: OrderFilter
  user: UserFilter
}

enum ShoppingCartOrderBy {
  id_ASC
  id_DESC
  totalCartPrice_ASC
  totalCartPrice_DESC
  totalQuantityInCart_ASC
  totalQuantityInCart_DESC
}

input ShoppingCartorderOrder {
  isPaid: Boolean
  orderNumber: Int!
  userId: ID
  user: OrderuserUser
}

input ShoppingCartuserUser {
  name: String!
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
}

input SignupUserInput {
  name: String!
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
  clientMutationId: String!
}

input UnsetCartProductOnProductCartProductInput {
  productProductId: ID!
  cartProductCartProductId: ID!
  clientMutationId: String!
}

type UnsetCartProductOnProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProductCartProduct: CartProduct
  productProduct: Product
  cartProductCartProductEdge: CartProductEdge
  productProductEdge: ProductEdge
}

input UnsetOrderOnShoppingCartOrderInput {
  shoppingCartShoppingCartId: ID!
  orderOrderId: ID!
  clientMutationId: String!
}

type UnsetOrderOnShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  orderOrder: Order
  shoppingCartShoppingCart: ShoppingCart
  orderOrderEdge: OrderEdge
  shoppingCartShoppingCartEdge: ShoppingCartEdge
}

type UnsetUserOnShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  shoppingCartShoppingCart: ShoppingCart
  userUserEdge: UserEdge
  shoppingCartShoppingCartEdge: ShoppingCartEdge
}

input UnsetUserOnShoppingCartUserInput {
  shoppingCartShoppingCartId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input UpdateCartProduct {
  id: ID!
  quantityOnCart: Int
  productId: ID
  product: CartProductproductProduct
  shoppingCartId: ID
  shoppingCart: CartProductshoppingCartShoppingCart
}

input UpdateCartProductInput {
  id: ID!
  quantityOnCart: Int
  productId: ID
  product: CartProductproductProduct
  shoppingCartId: ID
  shoppingCart: CartProductshoppingCartShoppingCart
  clientMutationId: String!
}

type UpdateCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProduct: CartProduct
  edge: CartProductEdge
  product: Product
  shoppingCart: ShoppingCart
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateCartProductInput {
  update: UpdateCartProduct!
  create: CreateCartProduct!
  clientMutationId: String!
}

type UpdateOrCreateCartProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  cartProduct: CartProduct
  edge: CartProductEdge
  product: Product
  shoppingCart: ShoppingCart
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateOrderInput {
  update: UpdateOrder!
  create: CreateOrder!
  clientMutationId: String!
}

type UpdateOrCreateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  shoppingCart: ShoppingCart
  user: User
}

input UpdateOrCreatePaymentInfoInput {
  update: UpdatePaymentInfo!
  create: CreatePaymentInfo!
  clientMutationId: String!
}

type UpdateOrCreatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input UpdateOrCreateProductInput {
  update: UpdateProduct!
  create: CreateProduct!
  clientMutationId: String!
}

type UpdateOrCreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  cartProduct: CartProduct
}

input UpdateOrCreateShoppingCartInput {
  update: UpdateShoppingCart!
  create: CreateShoppingCart!
  clientMutationId: String!
}

type UpdateOrCreateShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCart: ShoppingCart
  edge: ShoppingCartEdge
  order: Order
  user: User
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  shoppingCart: ShoppingCart
}

input UpdateOrder {
  id: ID!
  isPaid: Boolean
  orderNumber: Int
  shoppingCartId: ID
  shoppingCart: OrdershoppingCartShoppingCart
  userId: ID
  user: OrderuserUser
}

input UpdateOrderInput {
  id: ID!
  isPaid: Boolean
  orderNumber: Int
  shoppingCartId: ID
  shoppingCart: OrdershoppingCartShoppingCart
  userId: ID
  user: OrderuserUser
  clientMutationId: String!
}

type UpdateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  shoppingCart: ShoppingCart
  user: User
}

input UpdatePaymentInfo {
  cardNumber: Int
  cvv: Int
  id: ID!
  isValid: Boolean
  userId: ID
  user: PaymentInfouserUser
}

input UpdatePaymentInfoInput {
  cardNumber: Int
  cvv: Int
  id: ID!
  isValid: Boolean
  userId: ID
  user: PaymentInfouserUser
  clientMutationId: String!
}

type UpdatePaymentInfoPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentInfo: PaymentInfo
  edge: PaymentInfoEdge
  user: User
}

input UpdateProduct {
  cardColor: Colors
  id: ID!
  imgUrl: String
  name: String
  price: Float
  quantityInStock: Int
  cartProductId: ID
  cartProduct: ProductcartProductCartProduct
}

input UpdateProductInput {
  cardColor: Colors
  id: ID!
  imgUrl: String
  name: String
  price: Float
  quantityInStock: Int
  cartProductId: ID
  cartProduct: ProductcartProductCartProduct
  clientMutationId: String!
}

type UpdateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  cartProduct: CartProduct
}

input UpdateShoppingCart {
  id: ID!
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
}

input UpdateShoppingCartInput {
  id: ID!
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  userId: ID
  user: ShoppingCartuserUser
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
  clientMutationId: String!
}

type UpdateShoppingCartPayload {
  viewer: Viewer!
  clientMutationId: String!
  shoppingCart: ShoppingCart
  edge: ShoppingCartEdge
  order: Order
  user: User
}

input UpdateUser {
  id: ID!
  name: String
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
}

input UpdateUserInput {
  id: ID!
  name: String
  shoppingCartId: ID
  shoppingCart: UsershoppingCartShoppingCart
  creditCardInfoIds: [ID!]
  creditCardInfo: [UsercreditCardInfoPaymentInfo!]
  ordersIds: [ID!]
  orders: [UserordersOrder!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  shoppingCart: ShoppingCart
}

type User implements Node {
  createdAt: DateTime!
  creditCardInfo(filter: PaymentInfoFilter, orderBy: PaymentInfoOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentInfoConnection
  id: ID!
  name: String!
  orders(filter: OrderFilter, orderBy: OrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection
  shoppingCart(filter: ShoppingCartFilter): ShoppingCart
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

input UsercreditCardInfoPaymentInfo {
  cardNumber: Int!
  cvv: Int!
  isValid: Boolean!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

input UserFilter {
  """Logical AND on all given filters."""
  AND: [UserFilter!]

  """Logical OR on all given filters."""
  OR: [UserFilter!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  creditCardInfo_every: PaymentInfoFilter
  creditCardInfo_some: PaymentInfoFilter
  creditCardInfo_none: PaymentInfoFilter
  orders_every: OrderFilter
  orders_some: OrderFilter
  orders_none: OrderFilter
  shoppingCart: ShoppingCartFilter
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserordersOrder {
  isPaid: Boolean
  orderNumber: Int!
  shoppingCartId: ID
  shoppingCart: OrdershoppingCartShoppingCart
}

input UsershoppingCartShoppingCart {
  totalCartPrice: Float
  totalQuantityInCart: Int
  orderId: ID
  order: ShoppingCartorderOrder
  cartProductsIds: [ID!]
  cartProducts: [ShoppingCartcartProductsCartProduct!]
}

"""This is the famous Relay viewer object"""
type Viewer {
  allCartProducts(filter: CartProductFilter, orderBy: CartProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CartProductConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allOrders(filter: OrderFilter, orderBy: OrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  allPaymentInfoes(filter: PaymentInfoFilter, orderBy: PaymentInfoOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentInfoConnection!
  allProducts(filter: ProductFilter, orderBy: ProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  allShoppingCarts(filter: ShoppingCartFilter, orderBy: ShoppingCartOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ShoppingCartConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  CartProduct(id: ID): CartProduct
  File(id: ID, secret: String, url: String): File
  Order(id: ID, orderNumber: Int): Order
  PaymentInfo(id: ID): PaymentInfo
  Product(id: ID): Product
  ShoppingCart(id: ID): ShoppingCart
  User(id: ID): User
  id: ID!
}

